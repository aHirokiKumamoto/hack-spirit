#!/usr/bin/env node

'use strict';

let program    = require('commander');
let moment     = require('moment');
let prompt     = require('prompt');
let colors     = require('colors/safe');
let HackSpirit = require('../lib/hack-spirit');

prompt.message   = '';
prompt.delimiter = '';

let w = colors.white;

program
  .version('0.0.7')
  .option('-u, --user [String]', 'user name')
  .option('-p, --password [String]', 'password')
  .option('-v, --verbose', 'print log')
  .option('-b, --browser', 'show browser');

program
  .command('login')
  .description('login with your team sprint credentials')
  .action(() => {
    if (program.user && program.password) {
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.login(program.user, program.password)
      return
    }
    let schema = {
      properties: {
              user: { required: true, description: w('User:') },
          password: { required: true, description: w('Password'), hidden: true }
      }
    };
    console.log('Enter your team spirit credentials.')
    prompt.start()
    prompt.get(schema, function (error, result) {
      if (error) {
         console.log('Sorry, something wrong: ' + error);
         return;
      }
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.login(result.user, result.password)
    });
  });
program
  .command('work_status')
  .description('print current work status')
  .action(() => {
    let hackSpirit = new HackSpirit(program.browser, program.verbose);
    hackSpirit.printWorkStatus(program.user, program.password);
  });
program
  .command('start_work')
  .description('start work')
  .action(() => {
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.startWork(program.user, program.password);
  });

program
  .command('finish_work')
  .description('finish_work')
  .action(() => {
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.finishWork(program.user, program.password);
  });


let datetimeFormat = 'YYYYMMDDHHmm';
let dateFormat     = 'YYYYMMDD';
let timeFormat     = 'HHmm';
let defaultNote    = ''
program
  .command('overtime')
  .description('Report your overtime work')
  .option(`-d, --datetime [${datetimeFormat}]`, 'What time you want to finish work (default: current time)')
  .option('-n, --note [String]', `Note of the application (default: "${defaultNote}")`)
  .action((opts) => {
      let date = opts.datetime ? moment(opts.datetime, datetimeFormat).toDate() : new Date();
      let note = opts.note ? opts.note : defaultNote;
      let HackSpirit = require('../lib/hack-spirit');

      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.reportOvertimeWork(program.user, program.password, date, note);
  });

program
  .command('delayed')
  .description('Report your delayed arrival')
  .option(`-d, --date [${dateFormat}]`, 'What day you ware delayed.(default: today)')
  .option('-n, --note [String]', `Note of the application (default: "${defaultNote}")`)
  .option('-p, --personal', 'The reason is personal')
  .action((opts) => {
      let date       = opts.date ? moment(opts.date, dateFormat).toDate() : new Date();
      let note       = opts.note ? opts.note : defaultNote;
      let isPersonal = opts.personal ? true : false;
      let HackSpirit = require('../lib/hack-spirit');

      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.reportDelayedArrival(program.user, program.password, date, note, isPersonal);
  });

program
  .command('worktime')
  .description('Record worktime')
  .option(`-d, --date [${dateFormat}]`, 'What day you want to record your worktime .(default: today)')
  .action((opts) => {
      let date = opts.date ? moment(opts.date, dateFormat).toDate() : new Date();
      let HackSpirit = require('../lib/hack-spirit');
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.recordWorkTime(program.user, program.password, date);
  });

program
  .command('chill_out')
  .description('Chill out')
  .option(`-d, --datetime [${datetimeFormat}]`, 'When you want to record your break time .(default: now)')
  .option(`-p, --period [${timeFormat}]`, 'How long you want to take a break.')
  .action((opts) => {
      let date = opts.datetime ? moment(opts.datetime, datetimeFormat).toDate() : new Date();
      let period = opts.period ? moment.duration(opts.period) : null;
      let HackSpirit = require('../lib/hack-spirit');
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.recordBreakTime(program.user, program.password, date, period);
  });

program
  .command('chilled_out')
  .description('Chilled out until the time')
  .option(`-d, --datetime [${datetimeFormat}]`, 'When you want to record your break time .(default: now)')
  .option(`-p, --period [${timeFormat}]`, 'How long you want to take a break.')
  .action((opts) => {
      let date = opts.datetime ? moment(opts.datetime, datetimeFormat).toDate() : new Date();
      let period = opts.period ? moment.duration(opts.period) : null;
      let HackSpirit = require('../lib/hack-spirit');
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.recordBreakedTime(program.user, program.password, date, period);
  });


program
  .command('chills')
  .description('Manage a chills')
  .option(`-d, --datetime [${datetimeFormat}]`, 'When you want to record your break time .(default: now)')
  .action((opts) => {
      let date = opts.datetime ? moment(opts.datetime, datetimeFormat).toDate() : new Date();
      let HackSpirit = require('../lib/hack-spirit');
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.breakTimes(program.user, program.password, date);
  });

program
  .command('weekly')
  .description('Generate weekly worktime report')
  .option(`-d, --date [${dateFormat}]`, 'What day you want to record your worktime .(default: today)')
  .action((opts) => {
      let date = opts.date ? moment(opts.date, dateFormat).toDate() : new Date();
      let HackSpirit = require('../lib/hack-spirit');
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.weeklyReport(program.user, program.password, date);
  });

program
  .command('monthly')
  .description('Generate weekly worktime report')
  .option(`-d, --date [${dateFormat}]`, 'What day you want to record your worktime .(default: today)')
  .action((opts) => {
      let date = opts.date ? moment(opts.date, dateFormat).toDate() : new Date();
      let HackSpirit = require('../lib/hack-spirit');
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.monthlyReport(program.user, program.password, date);
  });

program
  .command('time_report')
  .description('Generate worktime report with a specified period')
  .option(`-f, --from [${dateFormat}]`, 'From date')
  .option(`-t, --to [${dateFormat}]`, 'To date')
  .action((opts) => {
      let fromDate = opts.from ? moment(opts.from, dateFormat).toDate() : new Date();
      let toDate   = opts.to   ? moment(opts.to  , dateFormat).toDate() : new Date();
      let HackSpirit = require('../lib/hack-spirit');
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.timeReport(program.user, program.password, fromDate, toDate);
  });


program
  .command('*', '', { noHelp: true})
  .action(() => {
    program.outputHelp();
  });

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  program.outputHelp();
}
