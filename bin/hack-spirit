#!/usr/bin/env node

'use strict';

let program = require('commander');
let moment  = require('moment');

program
  .version('0.0.3')
  .option('-u, --user [String]', 'user name')
  .option('-p, --password [String]', 'password')
  .option('-v, --verbose', 'print log')
  .option('-b, --browser', 'show browser');

program
  .command('work_status')
  .description('print current work status')
  .action(() => {
    let HackSpirit = require('../lib/hack-spirit');
    let hackSpirit = new HackSpirit(program.browser, program.verbose);
    hackSpirit.printWorkStatus(program.user, program.password);
  });
program
  .command('start_work')
  .description('start work')
  .action(() => {
      let HackSpirit = require('../lib/hack-spirit');
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.startWork(program.user, program.password);
  });

program
  .command('finish_work')
  .description('finish_work')
  .action(() => {
      let HackSpirit = require('../lib/hack-spirit');
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.finishWork(program.user, program.password);
  });


let dateFormat = 'YYYYMMDDHHmm';
let defaultNote = 'Worked for great project.'
program
  .command('overtime')
  .description('Ask for overtime')
  .option(`-d, --datetime [${dateFormat}]`, 'What time you want to finish work (default: current time)')
  .option('-n, --note [String]', `Note of the application (default: "${defaultNote}")`)
  .action((opts) => {
      let date = opts.datetime ? moment(opts.datetime, dateFormat).toDate() : new Date();
      let note = opts.note ? opts.note : dafaultNote;
      let HackSpirit = require('../lib/hack-spirit');
      let hackSpirit = new HackSpirit(program.browser, program.verbose);
      hackSpirit.askForOvertime(program.user, program.password, date, note);
  });

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  program.outputHelp();
}